{"ast":null,"code":"var _jsxFileName = \"/Users/zicheng.s/Documents/UC Irvine Info/Github/Quizzical-Trivia-App/src/components/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Question from \"./Question\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Quiz() {\n  _s();\n\n  // const [begin, setBegin] = React.useState(false)\n  const [currentQuestion, setCurrentQuestion] = React.useState(0);\n  const [submitAnswer, setSubmitAnswer] = React.useState(false);\n  const [correctNum, setCorrectNum] = React.useState(0);\n  const [count, setCount] = React.useState(0);\n  const [quiz, setQuiz] = React.useState([{\n    question: \"\",\n    answers: [],\n    correctAnswer: \"\",\n    selectedAnswer: \"\",\n    id: \"\"\n  }]);\n  useEffect(() => {\n    fetch(\"https://opentdb.com/api.php?amount=6\").then(res => res.json()).then(data => {\n      setQuiz(data.results.map(item => ({\n        question: item.question.replace(/&quot;/g, '\"').replace(/&#039;/g, '\"'),\n        answers: [item.correct_answer, ...item.incorrect_answers].sort(() => Math.random() - 0.5),\n        correctAnswer: item.correct_answer.replace(/&quot;/g, '\"').replace(/&#039;/g, '\"'),\n        selectedAnswer: \"\",\n        id: nanoid()\n      })));\n    });\n  }, [count]);\n  /**\n   * handleClick() is used to save the answer user chosen for specific question\n   * @param value\n   * @param questionId\n   */\n\n  function handleClick(value, questionId) {\n    setQuiz(prev => {\n      return prev.map(que => {\n        return questionId === que.id ? { ...que,\n          selectedAnswer: `${value}`\n        } : { ...que\n        };\n      });\n    });\n  }\n  /**\n   * checkAnswer() is used to count the number of questions answered correctly\n   */\n\n\n  function checkAnswer() {\n    setSubmitAnswer(true);\n    let num = 0;\n    quiz.map(que => {\n      if (que.correctAnswer === que.selectedAnswer) {\n        num++;\n      }\n    });\n    setCorrectNum(num);\n  }\n\n  const questions = quiz.map(que => {\n    return /*#__PURE__*/_jsxDEV(Question, { ...que,\n      disability: submitAnswer,\n      handleClick: handleClick\n    }, que.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz\",\n    children: [questions, submitAnswer && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Correct: \", correctNum]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"quiz_checkAnswer_btn\",\n      onClick: checkAnswer,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"quiz_restart_btn\",\n      onClick: restart,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"iPWW3J44qUq/F5B6GlYJgugBQ9E=\");\n\n_c = Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useEffect","nanoid","Question","Quiz","currentQuestion","setCurrentQuestion","useState","submitAnswer","setSubmitAnswer","correctNum","setCorrectNum","count","setCount","quiz","setQuiz","question","answers","correctAnswer","selectedAnswer","id","fetch","then","res","json","data","results","map","item","replace","correct_answer","incorrect_answers","sort","Math","random","handleClick","value","questionId","prev","que","checkAnswer","num","questions","restart"],"sources":["/Users/zicheng.s/Documents/UC Irvine Info/Github/Quizzical-Trivia-App/src/components/Quiz.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport {nanoid} from \"nanoid\"\nimport Question from \"./Question\";\n\nexport default function Quiz() {\n    // const [begin, setBegin] = React.useState(false)\n    const [currentQuestion, setCurrentQuestion] = React.useState(0)\n    const [submitAnswer, setSubmitAnswer] = React.useState(false)\n    const [correctNum, setCorrectNum] = React.useState(0)\n    const [count, setCount] = React.useState(0)\n    const [quiz, setQuiz] = React.useState([{\n        question: \"\",\n        answers: [],\n        correctAnswer: \"\",\n        selectedAnswer: \"\",\n        id: \"\"\n    }])\n\n    useEffect(() => {\n        fetch(\"https://opentdb.com/api.php?amount=6\")\n            .then(res => res.json())\n            .then(data => {\n                setQuiz(data.results.map(item => ({\n                    question: item.question.replace(/&quot;/g, '\"').replace(/&#039;/g, '\"'),\n                    answers: [item.correct_answer, ...item.incorrect_answers]\n                        .sort(() => Math.random() - 0.5),\n                    correctAnswer: item.correct_answer.replace(/&quot;/g, '\"').replace(/&#039;/g, '\"'),\n                    selectedAnswer: \"\",\n                    id: nanoid()\n                })))\n            })\n    }, [count])\n\n    /**\n     * handleClick() is used to save the answer user chosen for specific question\n     * @param value\n     * @param questionId\n     */\n    function handleClick(value, questionId){\n        setQuiz(prev => {\n            return prev.map(que => {\n                return questionId === que.id? {...que, selectedAnswer: `${value}`} : {...que}\n            })\n        })\n    }\n\n    /**\n     * checkAnswer() is used to count the number of questions answered correctly\n     */\n    function checkAnswer(){\n        setSubmitAnswer(true)\n        let num = 0\n        quiz.map(que => {\n            if(que.correctAnswer === que.selectedAnswer){\n                num++\n            }\n        })\n        setCorrectNum(num)\n    }\n\n    const questions = quiz.map((que) => {\n        return <Question\n            key = {que.id}\n            {...que}\n            disability={submitAnswer}\n            handleClick={handleClick}\n            />\n    })\n\n    return (\n        <div className=\"quiz\">\n            {questions}\n            {submitAnswer && <p>Correct: {correctNum}</p>}\n            <button className=\"quiz_checkAnswer_btn\" onClick={checkAnswer}>Check Answers</button>\n            <button className=\"quiz_restart_btn\" onClick={restart}>Check Answers</button>\n        </div>\n\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}